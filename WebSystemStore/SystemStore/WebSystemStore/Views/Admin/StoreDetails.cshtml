@*@model BLL.Model.Store.StoreDtos

@{
    ViewData["Title"] = "Store Details";
}

<h2>Store Details</h2>

<div>
    <h3>@Model.Name</h3>
    <p>Location: @Model.Address</p>
    <p>Opening Time: @Model.TimeOpen.ToString(@"hh\:mm")</p>
    <p>Closing Time: @Model.TimeClose.ToString(@"hh\:mm")</p>
    <p>Preferential: @Model.Preferential</p>
    <p>Star Rating: @Model.StarEvaluate</p>
    <p>Address Location: @Model.AddressLocation</p>
    <p>Admin Name: @Model.AdminName</p>
    <p>Admin Time: @Model.AdminTime.ToString("MM/dd/yyyy")</p>
    <p>Status: @(Model.Status.HasValue ? Model.Status.Value : 0)</p>
</div>

<div>
    <h4>Orders</h4>
    <!-- This section requires an Orders property in StoreDtos or related model to function -->
    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Customer</th>
                <th>Status</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <!-- You need to modify StoreDtos to include Orders, or use a related DTO -->
            <!-- For now, this section is commented out until Orders data is available -->
            @* @foreach (var order in Model.Orders) *@
            @* { *@
            @* <tr> *@
            @* <td>@order.OrderId</td> *@
            @* <td>@order.CustomerName</td> *@
            @* <td>@order.Status</td> *@
            @* <td>@order.TotalAmount</td> *@
            @* </tr> *@
            @* } *@
        @*</tbody>
    </table>
</div>*@
@*
@model BLL.Model.Store.StoreDtos

@{
    ViewData["Title"] = "Store Details";
}

<h2>Store Details</h2>

<div>
    <h3>@Model.Name</h3>
    <p>Location: @Model.Address</p>
    <p>Opening Time: @Model.TimeOpen.ToString(@"hh\:mm")</p>
    <p>Closing Time: @Model.TimeClose.ToString(@"hh\:mm")</p>
    <p>Preferential: @Model.Preferential</p>
    <p>Star Rating: @Model.StarEvaluate</p>
    <p>Address Location: @Model.AddressLocation</p>
    <p>Admin Name: @Model.AdminName</p>
    <p>Admin Time: @Model.AdminTime.ToString("MM/dd/yyyy")</p>
    <p>Status: @(Model.Status.HasValue ? Model.Status.Value : 0)</p>
</div>

<div>
  <p>
    <label for="period">Select Period:</label>
    <select id="period" class="form-control">
        <option value="day">Day</option>
        <option value="month">Month</option>
        <option value="year">Year</option>
    </select>
</p>

<div id="dateSelector" style="display: none;">
    <label for="date">Select Date:</label>
    <input type="date" id="date" class="form-control">
</div>

<div id="monthSelector" style="display: none;">
    <label for="month">Select Month:</label>
    <select id="month" class="form-control">
        <option value="1">January</option>
        <option value="2">February</option>
        <option value="3">March</option>
        <option value="4">April</option>
        <option value="5">May</option>
        <option value="6">June</option>
        <option value="7">July</option>
        <option value="8">August</option>
        <option value="9">September</option>
        <option value="10">October</option>
        <option value="11">November</option>
        <option value="12">December</option>
    </select>
        <label for="year">Select Year:</label>
        
            <input type="number" id="year" class="form-control" min="2000" max="2100">
        
</div>

<div id="yearSelector" style="display: none;">
    <label for="year">Select Year:</label>
    <input type="number" id="year" class="form-control" min="2000" max="2100">
</div>

<p>
    <button class="btn btn-primary" id="viewRevenueBtn">View Revenue</button>
</p>
    <!-- Table to display monthly revenue -->
    <div id="monthlyRevenueTable" style="display: none;">
        <h4>Monthly Revenue for <span id="revenueYear"></span></h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Revenue</th>
                </tr>
            </thead>
            <tbody id="monthlyRevenueData">
                <!-- Dynamic content will be inserted here -->
            </tbody>
        </table>
    </div>
<div>
    <h4>Revenue</h4>
    <p id="revenueDisplay">Please select a period to view the revenue.</p>
</div>

</div>

<div>
    <div id="cartDetails" style="display: none;">
        <h3>Cart Details</h3>
        <p><strong>Delivery:</strong> <span id="delivery"></span></p>
        <p><strong>Phone Number:</strong> <span id="phoneNumber"></span></p>
        <p><strong>Order Time:</strong> <span id="orderTime"></span></p>
        <p><strong>Status:</strong> <span id="status"></span></p>

        <h4>Items in Cart</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Food Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody id="cartTableBody">
                <!-- Cart items will be dynamically inserted here -->
            </tbody>
        </table>

        <p><strong id="totalCartValue"></strong></p>
    </div>
</div>
<script>
    // Giả sử storeId được truyền vào từ Razor hoặc JavaScript
    const storeId = @Model.Id;  // Lấy storeId từ Razor nếu có

    // Hàm để gửi yêu cầu API và hiển thị doanh thu
    async function fetchRevenue(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error('Failed to fetch revenue');
            }
            const revenue = await response.json();
            return revenue.data;  // Giả sử API trả về giá trị doanh thu trong 'data'
        } catch (error) {
            console.error('Error fetching revenue:', error);
            return null;
        }
    }

    // Hàm để cập nhật UI với doanh thu
    function displayRevenue(revenue) {
        const revenueDisplay = document.getElementById('revenueDisplay');
        if (revenue !== null) {
            revenueDisplay.textContent = `Doanh thu: ${revenue.toFixed(2)} VNĐ`;
        } else {
            revenueDisplay.textContent = 'Error retrieving revenue data.';
        }
    }

    // Xử lý sự kiện khi chọn "period"
    document.getElementById('period').addEventListener('change', function () {
        const period = this.value;
        document.getElementById('dateSelector').style.display = (period === 'day') ? 'block' : 'none';
        document.getElementById('monthSelector').style.display = (period === 'month') ? 'block' : 'none';
        document.getElementById('yearSelector').style.display = (period === 'year') ? 'block' : 'none';
    });

    // Xử lý sự kiện khi bấm "View Revenue"
    document.getElementById('viewRevenueBtn').addEventListener('click', async function () {
        const period = document.getElementById('period').value;
        let url = `https://localhost:7152/Admin/GetRevenueByStoreIdDayOrMonthOrYear/${storeId}?period=${period}`;

        if (period === 'day') {
            const date = document.getElementById('date').value;
            if (date) {
                const formattedDate = new Date(date).toISOString(); // Định dạng ngày theo ISO
                url += `&date=${formattedDate}`;
            } else {
                alert("Please select a date for the day period.");
                return;
            }
        } else if (period === 'month') {
            const month = document.getElementById('month').value;
            const year = document.getElementById('year').value;  // Đảm bảo người dùng đã chọn năm
            if (month && year) {
                url += `&year=${year}&month=${month}`;
            } else {
                alert("Please select both a month and a year.");
                return;
            }
        } else if (period === 'year') {
            const year = document.getElementById('year').value;
            if (year) {
                url += `&year=${year}`;
            } else {
                alert("Please select a year.");
                return;
            }
        }

        // Gửi yêu cầu và hiển thị doanh thu
        const revenue = await fetchRevenue(url);
        displayRevenue(revenue);
    });
</script>
<script>
    const storeId = @Model.Id;  // Razor variable for StoreId

    // Function to fetch cart details from API
    async function fetchCartDetails(storeId) {
        try {
            const response = await fetch(`https://localhost:7152/Admin/cart/${storeId}`);
            if (!response.ok) {
                throw new Error('Failed to fetch cart details');
            }
            const cartData = await response.json();
            displayCartDetails(cartData);
        } catch (error) {
            console.error('Error fetching cart details:', error);
        }
    }

    // Function to display cart details on the page
    function displayCartDetails(cartData) {
        const cartDetailsSection = document.getElementById('cartDetails');
        const tableBody = document.getElementById('cartTableBody');
        const totalCartValueElement = document.getElementById('totalCartValue');

        if (cartData) {
            // Display general cart details
            document.getElementById('delivery').textContent = cartData.delivery || 'N/A';
            document.getElementById('phoneNumber').textContent = cartData.phoneNumber || 'N/A';
            document.getElementById('orderTime').textContent = new Date(cartData.timeOrder).toLocaleString();
            document.getElementById('status').textContent = cartData.status || '0';

            // Populate cart items
            tableBody.innerHTML = ''; // Clear previous cart items
            let totalCartValue = 0;
            cartData.detailCarts.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${item.foodName}</td>
                        <td>${item.quantity}</td>
                        <td>${item.price.toFixed(2)}</td>
                        <td>${item.totalMoney.toFixed(2)}</td>
                    `;
                tableBody.appendChild(row);
                totalCartValue += item.totalMoney;
            });

            // Display total cart value
            totalCartValueElement.textContent = `Total Cart Value: $${totalCartValue.toFixed(2)}`;
            cartDetailsSection.style.display = 'block';  // Show the cart details section
        } else {
            cartDetailsSection.innerHTML = '<p>No cart data available for this store.</p>';
        }
    }

    // Fetch cart details when the page loads
    window.onload = function () {
        fetchCartDetails(storeId);
    };
</script>
*@
@model BLL.Model.Store.StoreDtos
@using BLL.IService
@inject IHttpContextAccessor httpcontext
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "InfoStore";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var service = httpcontext.HttpContext.RequestServices.GetService<IProductService>();
    var ContentName = await service.GetContentByID(Model.ContentID);
    var time = Model.AdminTime.ToString("dd/MM/yyyy HH:mm:ss");
}
<link href="~/css/store.css" rel="stylesheet" />
@* <div class="main-content" style="margin-top: 40px;">
    <div class="container py-5 bg-white">
        <div class="title" style="text-align: center;">
            <h1 class="m-0">Thông Tin Cửa Hàng</h1>
        </div>
        <div class="d-flex mt-5 col-6">
            <a href="/Admin/ListStores" class="btn btn-shoppefood text-white me-3"><i class="far fa-arrow-alt-circle-left icon-style"></i></a>
            <a class="btn btn-warning text-black update-store" data-store-id="@Model.Id"><i class="far fa-edit icon-style"></i></a>
        </div>
        <div style="margin-top:50px">
            <div class="d-block d-xxl-flex">
                <div class="col-12 col-xxl-6 mb-3 mb-xxl-0 text-center" style="height:350px;">
                    <img src='@Configuration["https:pathImg"]@Model.Id/@Model.Image' class="img-thumbnail" style="height:350px" />
                </div>
                <div class="col-12 col-xxl-6 ps-0 ps-xxl-4">
                    <div class="info-label">
                        <i class="fas fa-store"></i>
                        <span>@Model.Name</span>
                    </div>
                    <div class="info-label">
                        <i class="far fa-clock"></i>
                        <span>@Model.TimeOpen - @Model.TimeClose</span>
                    </div>
                    <div class="info-label">
                        <i class="fas fa-gifts"></i>
                        <span>@Model.Preferential</span>
                    </div>
                    <div class="info-label">
                        <i class="far fa-star"></i>
                        <span>@Model.StarEvaluate Đánh Giá Trên ShopeeFood</span>
                    </div>
                    <div class="info-label">
                        <i class="fas fa-location-arrow"></i>
                        <span>@Model.Address , @Model.AddressLocation</span>
                    </div>
                    <div class="info-label">
                        <i class="fas fa-tags"></i>
                        <span>@ContentName.Name</span>
                    </div>
                    <div class="info-label">
                        <i class="fas fa-user-edit"></i>
                        <span>@Model.AdminName</span>
                    </div>
                    <div class="info-label">
                        <i class="fas fa-user-clock"></i>
                        <span>@time</span>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<partial name="UpdateStoreById" />
<div class="container mx-auto px-4">
    <!-- Hàng trên -->
    <div class="grid md:grid-cols-2 gap-6 mb-6">
        <!-- Layout 1: Doanh Thu 7 Ngày -->
        <div class="bg-white rounded-xl shadow-lg p-4 hover:scale-105 transform transition duration-300">
            <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 7 Ngày gần nhất</h4>
            <canvas id="sevenDayRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
        </div>

        <!-- Layout 2: Doanh Thu 8 tuần -->
        <div class="bg-white rounded-xl shadow-lg p-4 hover:scale-105 transform transition duration-300">
            <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 8 Tuần gần nhất</h4>
            <canvas id="weeklyRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
        </div>
    </div>

    <!-- Hàng dưới -->
    <div class="grid md:grid-cols-2 gap-6">
        <!-- Layout 3: Doanh Thu 12 Tháng -->
        <div class="bg-white rounded-xl shadow-lg p-4 hover:scale-105 transform transition duration-300">
            <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 12 Tháng gần nhất</h4>
            <canvas id="monthlyRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
        </div>

        <!-- Layout 4: Giao diện chọn thời gian -->
        <div class="bg-gray-100 rounded-xl shadow-lg p-8">
            <div class="flex justify-between items-center mb-8">
                <h2 class="text-3xl font-bold text-indigo-800">
                    Doanh Thu
                    <i class="fas fa-chart-bar text-4xl text-indigo-500"></i>
                </h2>
            </div>
            <div class="space-y-8">
                <div>
                    <label for="period" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Thời Gian</label>
                    <select id="period" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg py-2 px-3 transition duration-200">
                        <option value="">Chọn Thời Gian</option>
                        <option value="day">Ngày</option>
                        <option value="month">Tháng</option>
                        <option value="year">Năm</option>
                    </select>
                </div>
                <div class="flex space-x-4 mt-4">
                    <button id="viewRevenueBtn" class="w-full bg-emerald-500 text-white font-semibold py-3 px-4 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:bg-emerald-600 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-emerald-400 active:scale-95">
                        Xem Doanh Thu
                    </button>
                </div>
                <div class="bg-white rounded-lg p-6 mt-8 shadow">
                    <h3 class="text-xl font-semibold text-indigo-800 mb-2 flex items-center">
                        Chi Tiết Doanh Thu
                        <i class="fas fa-info-circle ml-2 text-indigo-500"></i>
                    </h3>
                    <p id="revenueDisplay" class="text-2xl font-bold text-gray-900">
                        Chọn một thời gian
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
 *@
<div class="container mx-auto px-4 mt-8">
    <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
        <div class="title text-center mb-5">
            <h1 class="m-0 text-2xl font-bold text-gray-800">Thông Tin Cửa Hàng</h1>
        </div>
        <div class="d-flex mt-5 col-6">
            <a href="/Admin/ListStores" class="btn btn-shoppefood text-white me-3">
                <i class="far fa-arrow-alt-circle-left icon-style"></i>
            </a>
            <a class="btn btn-warning text-black update-store" data-store-id="@Model.Id">
                <i class="far fa-edit icon-style"></i>
            </a>
        </div>
        <div class="mt-10">
            <div class="d-block d-xxl-flex">
                <!-- Hình ảnh -->
                <div class="col-12 col-xxl-6 mb-3 mb-xxl-0 text-center">
                    <img src='@Configuration["https:pathImg"]@Model.Id/@Model.Image' class="img-thumbnail rounded-xl shadow-md" style="height:350px" />
                </div>
                <!-- Thông tin -->
                <div class="col-12 col-xxl-6 ps-0 ps-xxl-4 space-y-4">
                    <div class="info-label flex items-center text-lg">
                        <i class="fas fa-store me-3 text-indigo-500"></i>
                        <span class="font-semibold">@Model.Name</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="far fa-clock me-3 text-indigo-500"></i>
                        <span>@Model.TimeOpen - @Model.TimeClose</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="fas fa-gifts me-3 text-indigo-500"></i>
                        <span>@Model.Preferential</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="far fa-star me-3 text-indigo-500"></i>
                        <span>@Model.StarEvaluate Đánh Giá Trên ShopeeFood</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="fas fa-location-arrow me-3 text-indigo-500"></i>
                        <span>@Model.Address , @Model.AddressLocation</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="fas fa-tags me-3 text-indigo-500"></i>
                        <span>@ContentName.Name</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="fas fa-user-edit me-3 text-indigo-500"></i>
                        <span>@Model.AdminName</span>
                    </div>
                    <div class="info-label flex items-center text-lg">
                        <i class="fas fa-user-clock me-3 text-indigo-500"></i>
                        <span>@time</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<partial name="UpdateStoreById" />
<div class="container mx-auto px-4 mt-8">
    <!-- Hàng trên -->
    <div class="grid md:grid-cols-2 gap-6 mb-6">
        <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
            <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 7 Ngày gần nhất</h4>
            <canvas id="sevenDayRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
        </div>
        <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
            <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 8 Tuần gần nhất</h4>
            <canvas id="weeklyRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
        </div>
    </div>

    <!-- Hàng dưới -->
    <div class="grid md:grid-cols-2 gap-6">
        <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
            <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 12 Tháng gần nhất</h4>
            <canvas id="monthlyRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
        </div>
        <div class="bg-gray-100 rounded-xl shadow-lg p-8">
            <div class="flex justify-between items-center mb-8">
                <h2 class="text-3xl font-bold text-indigo-800">
                    Doanh Thu
                    <i class="fas fa-chart-bar text-4xl text-indigo-500"></i>
                </h2>
            </div>
            <div class="space-y-8">
                <div>
                    <label for="period" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Thời Gian</label>
                    <select id="period" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg py-2 px-3 transition duration-200">
                        <option value="">Chọn Thời Gian</option>
                        <option value="day">Ngày</option>
                        <option value="month">Tháng</option>
                        <option value="year">Năm</option>
                    </select>
                </div>
                <div id="dateSelector" class="hidden">
                    <label for="date" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Ngày</label>
                    <input type="date" id="date" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200" />
                </div>
                <div id="monthSelector" class="hidden space-y-4">
                    <div>
                        <label for="month" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Tháng</label>
                        <select id="month" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200">
                            @for (int i = 1; i <= 12; i++)
                            {
                                <option value="@i">@(new DateTime(2000, i, 1).ToString("MMMM"))</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="monthYear" class="block text-lg font-medium text-indigo-800 mb-2">Năm</label>
                        <select id="monthYear" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200">
                            @for (int year = 2000; year <= DateTime.Now.Year; year++)
                            {
                                <option value="@year" selected="@(year == DateTime.Now.Year)">@year</option>
                            }
                        </select>
                    </div>
                </div>
                <div id="yearSelector" class="hidden">
                    <label for="year" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Năm</label>
                    <select id="year" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200">
                        @for (int year = 2000; year <= DateTime.Now.Year; year++)
                        {
                            <option value="@year" selected="@(year == DateTime.Now.Year)">@year</option>
                        }
                    </select>
                </div>
                <div class="flex space-x-4 mt-4">
                    <button id="viewRevenueBtn" class="w-full bg-emerald-500 text-white font-semibold py-3 px-4 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:bg-emerald-600 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-emerald-400 active:scale-95">
                        Xem Doanh Thu
                    </button>
                </div>
                <div class="bg-white rounded-lg p-6 mt-8 shadow">
                    <h3 class="text-xl font-semibold text-indigo-800 mb-2 flex items-center">
                        Chi Tiết Doanh Thu
                        <i class="fas fa-info-circle ml-2 text-indigo-500"></i>
                    </h3>
                    <p id="revenueDisplay" class="text-2xl font-bold text-gray-900">
                        Chọn một thời gian
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="~/js/InfoStore.js" asp-append-version="true"></script>
@section scripts {
<script>
        document.getElementById("period").addEventListener("change", function () {
            const selected = this.value;
            document.getElementById("dateSelector").classList.toggle("hidden", selected !== "day");
            document.getElementById("monthSelector").classList.toggle("hidden", selected !== "month");
            document.getElementById("yearSelector").classList.toggle("hidden", selected !== "year");
        });
    const storeId = @Model.Id;

    // Fetching weekly revenue data
        document.addEventListener("DOMContentLoaded", async function () {
            // You can dynamically set the storeId based on your context
            

            // Fetch 7-day Revenue Data
            const fetch7DayData = async () => {
                try {
                    const response = await fetch(`https://localhost:7152/Cart/GetTotalRevenueForEachStoreLast7Days?storeId=${storeId}`);
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching 7-day revenue data:", error);
                    return [];
                }
            };

            // Prepare 7-day Data
            const sevenDayData = await fetch7DayData();
            const sevenDayLabels = sevenDayData.map(day => new Date(day.date).toLocaleDateString());
            const sevenDayRevenues = sevenDayData.map(day => day.totalRevenue);

            // Render 7-day Revenue Chart
            const ctx7Day = document.getElementById("sevenDayRevenueChart").getContext("2d");
            new Chart(ctx7Day, {
                type: "line",
                data: {
                    labels: sevenDayLabels,
                    datasets: [{
                        label: "Doanh thu hàng ngày (VNĐ)",
                        data: sevenDayRevenues,
                        backgroundColor: "rgba(153, 102, 255, 0.2)",
                        borderColor: "rgba(153, 102, 255, 1)",
                        borderWidth: 2,
                        fill: true,
                    }],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Doanh thu: ${context.raw.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                },
            });
        });


    // Fetching weekly data and rendering chart
        document.addEventListener("DOMContentLoaded", async function () {
            //const storeId = 1; // You should assign this dynamically based on your context

            // Fetch Weekly Revenue Data
            const fetchWeeklyData = async () => {
                try {
                    const response = await fetch(`https://localhost:7152/Cart/GetTotalRevenueForEachStoreLast8Weeks?storeId=${storeId}`);
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching weekly revenue data:", error);
                    return [];
                }
            };

            // Prepare Weekly Data
            const weeklyData = await fetchWeeklyData();

            // Labels for Weeks (Week 1, Week 2,...)
            const weeklyLabels = weeklyData.map((week, index) => `Week ${index + 1}`);

            // Render Weekly Revenue Chart
            const ctxWeekly = document.getElementById("weeklyRevenueChart").getContext("2d");

            new Chart(ctxWeekly, {
                type: "line",
                data: {
                    labels: weeklyLabels,  // Use Week 1, Week 2,... for labels
                    datasets: [{
                        label: "Doanh thu hàng tuần (VNĐ)",
                        data: weeklyData.map(week => week.totalRevenue),
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 2,
                        fill: true,
                    }],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                // Show detailed revenue for each week in tooltip
                                label: function (context) {
                                    const weekIndex = context.dataIndex;  // Get the index of the week
                                    const week = weeklyData[weekIndex];
                                    const weekStartDate = week.startDate;  // Assuming startDate exists in your data
                                    const weekEndDate = week.endDate;  // Assuming endDate exists in your data
                                    const totalRevenue = context.raw;

                                    return `Doanh thu tuần ${weekIndex + 1}: ${totalRevenue.toLocaleString()} VNĐ\nTừ ${weekStartDate} đến ${weekEndDate}`;
                                },
                            },
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                        x: {
                            // Show the week label on the X axis
                            ticks: {
                                callback: function (value, index) {
                                    return `Week ${index + 1}`; // Custom label format for X axis
                                },
                            },
                        },
                    },
                },
            });
        });




        document.addEventListener("DOMContentLoaded", async function () {
            // Fetch Monthly Revenue Data (You can keep this if needed)
            const fetchMonthlyData = async () => {
                try {
                    const response = await fetch(`https://localhost:7152/Cart/GetTotalRevenueForEachStoreLast12Months?storeId=${storeId}`);
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching monthly revenue data:", error);
                    return [];
                }
            };

            // Prepare Weekly Data
            // Prepare Monthly Data
            const monthlyData = await fetchMonthlyData();
            const monthlyLabels = monthlyData.map(month => month.monthName);
            const monthlyRevenues = monthlyData.map(month => month.totalRevenue);

            // Render Monthly Revenue Chart
            const ctxMonthly = document.getElementById("monthlyRevenueChart").getContext("2d");
            new Chart(ctxMonthly, {
                type: "bar",
                data: {
                    labels: monthlyLabels,
                    datasets: [{
                        label: "Doanh thu hàng tháng (VNĐ)",
                        data: monthlyRevenues,
                        backgroundColor: "rgba(54, 162, 235, 0.6)",
                        borderColor: "rgba(54, 162, 235, 1)",
                        borderWidth: 1,
                    }],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Doanh thu: ${context.raw.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                    scales: {
                        x: { title: { display: true, text: "Tháng" } },
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: "Doanh thu (VNĐ)" },
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                },
            });
        });


            

    // Handle revenue period selection and fetch data
    document.getElementById('period').addEventListener('change', function () {
        const period = this.value;
        document.getElementById('dateSelector').style.display = (period === 'day') ? 'block' : 'none';
        document.getElementById('monthSelector').style.display = (period === 'month') ? 'block' : 'none';
        document.getElementById('yearSelector').style.display = (period === 'year') ? 'block' : 'none';
    });

    // Handle "View Revenue" button click
    document.getElementById('viewRevenueBtn').addEventListener('click', async function () {
        const period = document.getElementById('period').value;
        let url = `https://localhost:7152/Admin/GetRevenueByStoreIdDayOrMonthOrYear/${storeId}?period=${period}`;

        if (period === 'day') {
            const date = document.getElementById('date').value;
            if (date) {
                const formattedDate = new Date(date).toISOString();
                url += `&date=${formattedDate}`;
            } else {
                alert("Please select a date for the day period.");
                return;
            }
        } else if (period === 'month') {
            const month = document.getElementById('month').value;
            const year = document.getElementById('year').value;
            if (month && year) {
                url += `&year=${year}&month=${month}`;
            } else {
                alert("Please select both a month and a year.");
                return;
            }
        } else if (period === 'year') {
            const year = document.getElementById('year').value;
            if (year) {
                url += `&year=${year}`;
            } else {
                alert("Please select a year.");
                return;
            }
        }

        const revenue = await fetchRevenue(url);
        displayRevenue(revenue);
    });

    // Function to fetch revenue data
    async function fetchRevenue(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error('Failed to fetch revenue');
            }
            const revenue = await response.json();
            return revenue.data;
        } catch (error) {
            console.error('Error fetching revenue:', error);
            return null;
        }
    }

    // Function to display revenue on UI
    function displayRevenue(revenue) {
        const revenueDisplay = document.getElementById('revenueDisplay');
        if (revenue !== null) {
            revenueDisplay.textContent = `Doanh thu: ${revenue.toFixed(2)} VNĐ`;
        } else {
            revenueDisplay.textContent = 'Error retrieving revenue data.';
        }
    }

    // Fetch cart details on page load
    window.onload = function () {
        fetchCartDetails(storeId);
    };

    // Fetch cart details from API
    async function fetchCartDetails(storeId) {
        try {
            const response = await fetch(`https://localhost:7152/Admin/cart/${storeId}`);
            if (!response.ok) {
                throw new Error('Failed to fetch cart details');
            }
            const cartData = await response.json();
            displayCartDetails(cartData);
        } catch (error) {
            console.error('Error fetching cart details:', error);
        }
    }

    // Function to display cart details
    function displayCartDetails(cartData) {
        const cartDetailsSection = document.getElementById('cartDetails');
        const tableBody = document.getElementById('cartTableBody');
        const totalCartValueElement = document.getElementById('totalCartValue');

        if (cartData) {
            document.getElementById('delivery').textContent = cartData.delivery || 'N/A';
            document.getElementById('phoneNumber').textContent = cartData.phoneNumber || 'N/A';
            document.getElementById('orderTime').textContent = new Date(cartData.timeOrder).toLocaleString();
            document.getElementById('status').textContent = cartData.status || '0';

            tableBody.innerHTML = '';
            let totalCartValue = 0;
            cartData.detailCarts.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${item.foodName}</td><td>${item.quantity}</td><td>${item.totalPrice.toLocaleString()}</td>`;
                tableBody.appendChild(row);
                totalCartValue += item.totalPrice;
            });

            totalCartValueElement.textContent = totalCartValue.toLocaleString();
        }
    }
</script>
}

<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
