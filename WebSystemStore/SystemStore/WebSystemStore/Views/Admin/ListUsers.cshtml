@*
@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<BLL.Model.Customer.CustomerDtos>

@{
    ViewData["Title"] = "User List";
}

<h2>User List</h2>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th> Name</th>
            <th>Birthday</th>
            <th>Gender</th>
            <th>Location</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var customer in Model)
        {
            <tr>
                <td>@customer.FirstName @customer.LastName</td>
                <td>@customer.Birthday?.ToString("MM/dd/yyyy")</td>
                <td>@(customer.Gender.HasValue ? (customer.Gender == 1 ? "Male" : "Female") : "Not specified")</td>
                <td>@customer.Location</td>
                <td>
                    <a href="@Url.Action("UserDetails", "Admin", new { customerId = customer.LastName })" class="btn btn-info">View</a>
                    <a href="@Url.Action("DeleteUser", "Admin", new { customerId = customer.LastName })" class="btn btn-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    @Html.PagedListPager(Model, page => Url.Action("ListUsers", new { page }))
</div>
*@
@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<BLL.Model.Customer.CustomerDtos>

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <style>
        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

            .pagination a {
                padding: 0.5rem 1rem;
                border: 1px solid #e5e7eb;
                border-radius: 0.375rem;
                color: #374151;
                text-decoration: none;
                transition: all 0.2s;
            }

                .pagination a:hover {
                    background-color: #f3f4f6;
                    border-color: #d1d5db;
                }

            .pagination .active {
                background-color: #3b82f6;
                color: white;
                border-color: #3b82f6;
            }

        .gender-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .gender-male {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .gender-female {
            background-color: #fce7f3;
            color: #9d174d;
        }

        .gender-unspecified {
            background-color: #f3f4f6;
            color: #4b5563;
        }

        .tab-button {
            padding: 0.5rem 1rem;
            color: #4b5563;
            font-medium;
            font-size: 0.875rem;
            border-bottom: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .tab-button:hover {
                border-bottom-color: #d1d5db;
            }

            .tab-button.active {
                color: #1f2937;
                border-bottom-color: #3b82f6;
            }

        .tab-content {
            padding: 1rem;
            background-color: #ffffff;
            border: 1px solid #e5e7eb;
            border-radius: 0.375rem;
            margin-top: 1rem;
        }

            .tab-content.hidden {
                display: none;
            }

        .btn-primary {
            display: inline-block;
            padding: 0.5rem 1rem;
            background-color: #3b82f6;
            color: #ffffff;
            font-size: 0.875rem;
            border-radius: 0.375rem;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

            .btn-primary:hover {
                background-color: #2563eb;
            }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto p-6">
        <div class="bg-white rounded-lg shadow-sm">
           
            <!-- Header -->
            <div class="border-b border-gray-200 px-6 py-4 flex justify-between items-center">
                
                <h1 class="text-2xl font-semibold text-gray-800">User List</h1>
                @* <a href="@Url.Action("CreateUser", "Admin")" class="btn-primary">Add New Store</a> *@
            </div>
            <!-- Form tìm kiếm -->
            <form method="get" action="@Url.Action("ListUsers", "Admin")" class="mb-4">
                <div class="flex items-center space-x-4">
                    <input type="text" name="searchTerm" placeholder="Search by name..." value="@ViewBag.SearchTerm"
                           class="px-4 py-2 border rounded-md" />
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-md">Search</button>
                </div>
            </form>
            <!-- Notifications -->
            @if (TempData["Success"] != null)
            {
                <div class="bg-green-50 border-l-4 border-green-400 p-4 m-6">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-green-700">@TempData["Success"]</p>
                        </div>
                    </div>
                </div>
            }

            @if (TempData["Error"] != null)
            {
                <div class="bg-red-50 border-l-4 border-red-400 p-4 m-6">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-red-700">@TempData["Error"]</p>
                        </div>
                    </div>
                </div>
            }

            <!-- Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Birthday</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gender</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                           @*  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th> *@
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var customer in Model)
                        {
                            <tr class="hover:bg-gray-50 transition-colors">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="h-10 w-10 flex-shrink-0">
                                            <span class="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center">
                                                <span class="text-xl text-gray-600">@(customer.FirstName.FirstOrDefault())</span>
                                            </span>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">@customer.FirstName @customer.LastName</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    @(customer.Birthday?.ToString("MM/dd/yyyy") ?? "Not specified")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="gender-badge @(customer.Gender switch {
                                        0=> "gender-male",
                                        1 => "gender-female",
                                        _ => "gender-unspecified"
                                    })">
                                        @(customer.Gender switch
                                        {
                                            0 => "Male",
                                            1 => "Female",
                                            _ => "Not specified"
                                        })
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    @(customer.Location ?? "Not specified")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                  @*   <div class="flex space-x-2">
                                        <a href="@Url.Action("UserDetails", "Admin", new { customerId = customer.LastName })"
                                           class="text-indigo-600 hover:text-indigo-900 transition-colors">
                                            View
                                        </a>
                                        <a href="@Url.Action("DeleteUser", "Admin", new { customerId = customer.LastName })"
                                           class="text-red-600 hover:text-red-900 transition-colors"
                                           onclick="return confirm('Are you sure you want to delete this user?')">
                                            Delete
                                        </a>
                                    </div> *@
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="px-6 py-4 border-t border-gray-200">
                @Html.PagedListPager(Model, page => Url.Action("ListUsers", new { page, sortOrder = ViewBag.SortOrder, searchTerm = ViewBag.SearchTerm }))
            </div>
        </div>
    </div>
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const tabs = document.querySelectorAll('.tab-button');
                const contents = document.querySelectorAll('.tab-content');

                tabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        // Remove active state from all tabs and contents
                        tabs.forEach(t => t.classList.remove('active'));
                        contents.forEach(c => c.classList.add('hidden'));

                        // Add active state to selected tab and corresponding content
                        tab.classList.add('active');
                        const target = document.getElementById(tab.dataset.tab);
                        target.classList.remove('hidden');
                    });
                });
            });
        </script>
</body>


</html>