<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>

@{
    ViewData["Title"] = "Trang Chủ";
    // Lấy HttpContext từ ViewContext
    var httpContext = ViewContext.HttpContext;

    // Lấy storeID từ session
    var storeID = httpContext.Session.GetInt32("storeID");
}
@using BLL.IService
@using Microsoft.CodeAnalysis.Differencing
@inject IHttpContextAccessor httpcontext
@inject IConfiguration Configuration
@{
    var admin = httpcontext.HttpContext.RequestServices.GetService<IAdminService>();
    var service = httpcontext.HttpContext.RequestServices.GetService<IStoreService>();
    var serviceMenu = httpcontext.HttpContext.RequestServices.GetService<IMenuService>();
    var serviceFood = httpcontext.HttpContext.RequestServices.GetService<IFoodService>();
    var StoreID = httpcontext.HttpContext.Session.GetInt32("storeID");
    var userRole = httpcontext.HttpContext.Session.GetString("customerRole");
    var totalStore = await admin.GetAllStores();
    int storeCount = totalStore.Count;
    var totalCustomer = await admin.GetAllUsers();
    int customerCount = totalCustomer.Count;
    var totalOrder = await admin.GetAllOrdersToday();
    int orderCount = totalOrder.Count;
    var totalRevenue = await admin.GetTotalRevenueForAllStoresToday();
    // int totalRevenue = await admin.;
    var store = await service.DetailStore((int)StoreID);
    var menu = await serviceMenu.ListMenuStore((int)StoreID);
    var menuactive = menu.Where(x => x.Status == 1).Count();
    var listmenu = menu.Select(x => x.Id).Distinct().Count();
    var food = await serviceFood.ListFoodByStore((int)StoreID);
    var foodactive = food.Where(x => x.Status == 1).Count();
    var listfood = food.Select(x => x.Id).Distinct().Count();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <!-- Link to External CSS File -->
    <link rel="stylesheet" href="~/css/style.css"> <!-- Ensure correct path -->
   <link href="~/css/store1.css" rel="stylesheet" />
</head>
<input type="hidden" id="store-id-generic" value="@store.Id" />
@if (userRole == "Manage")
{
    

<div class="main-content" style="margin-top: 70px;">
    <div class="container bg-white py-5">
        <div class="title pb-5" style="text-align: center;">
            <h1 class="m-0">Chúc Bạn Một Ngày Làm Việc Vui Vẻ</h1>
        </div>
       
        <div class="row d-none d-xxl-flex">
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListOrderNow", "Cart",new{StoreID = store.Id})" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Đơn Đang Đợi</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer" id="cart-order-xll">0 Đơn</label>
                    </div>
                </a>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Giờ Hoạt Động</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    <label>@store.TimeOpen - @store.TimeClose</label>
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Thời Gian</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    <label id="time-now"></label>
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Trạng Thái</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    @if (@store.Status == 1)
                    {
                        <a href="@Url.Action("SetStatusStore", "Store", new { StoreID = store.Id })" class="text-success"><i class="fa fa-3x fa-toggle-on" aria-hidden="true"></i></a>
                    }
                    else if (@store.Status == 0)
                    {
                        <a href="@Url.Action("SetStatusStore", "Store", new { StoreID = store.Id })" class="text-secondary"><i class="fa fa-3x fa-toggle-off" aria-hidden="true"></i></a>
                    }
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Doanh Thu</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    <label id="total-cart-today-xxl">0<sup>đ</sup></label>
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListCart", "Cart")" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Tổng Số Đơn Hôm Nay</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer" id="cart-order-today-xxl">0 Đơn</label>
                    </div>
                </a>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListMenu", "Menu",null)" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Tổng Số Menu</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer">
                            @listmenu Loại
                            @if (menuactive != listmenu)
                            {
                                <span>( <i class="text-success fas fa-check"></i> @menuactive )</span>
                            }
                        </label>
                    </div>
                </a>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListProduct", "Food",null)" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Tổng Số Sản Phẩm</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer">
                            @listfood Loại
                            @if (foodactive != listfood)
                            {
                                <span>( <i class="text-success fas fa-check"></i> @foodactive )</span>
                            }
                        </label>
                    </div>
                </a>
            </div>
        </div>
        <div class="row d-flex d-xxl-none">
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Thời Gian</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    <label id="time-now-responsive"></label>
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Trạng Thái</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    @if (@store.Status == 1)
                    {
                        <a href="@Url.Action("SetStatusStore", "Store", new { StoreID = store.Id })" class="text-success"><i class="fa fa-3x fa-toggle-on" aria-hidden="true"></i></a>
                    }
                    else if (@store.Status == 0)
                    {
                        <a href="@Url.Action("SetStatusStore", "Store", new { StoreID = store.Id })" class="text-secondary"><i class="fa fa-3x fa-toggle-off" aria-hidden="true"></i></a>
                    }
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Giờ Hoạt Động</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    <label>@store.TimeOpen - @store.TimeClose</label>
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListOrderNow", "Cart",new{StoreID = store.Id})" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Đơn Đang Đợi</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer" id="cart-order-mobile">0 Đơn</label>
                    </div>
                </a>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListCart", "Cart")" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Tổng Số Đơn Hôm Nay</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer" id="cart-order-today-mobile">0 Đơn</label>
                    </div>
                </a>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                    <p class="m-0" id="text-title-home"><b>Doanh Thu</b></p>
                </div>
                <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                    <label id="total-cart-today-mobile">0<sup>đ</sup></label>
                </div>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListMenu", "Menu",null)" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Tổng Số Menu</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer">
                            @listmenu Loại
                            @if (menuactive != listmenu)
                            {
                                <span>( <i class="text-success fas fa-check"></i> @menuactive )</span>
                            }
                        </label>
                    </div>
                </a>
            </div>
            <div class="col-6 col-xxl-3 info-home">
                <a href="@Url.Action("ListProduct", "Food",null)" class="text-black w-100">
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-top">
                        <p class="m-0" id="text-title-home"><b>Tổng Số Sản Phẩm</b></p>
                    </div>
                    <div class="d-flex align-items-center justify-content-center h-50 content-info-home" id="content-info-home-bot">
                        <label class="cursor-pointer">
                            @listfood Loại
                            @if (foodactive != listfood)
                            {
                                <span>( <i class="text-success fas fa-check"></i> @foodactive )</span>
                            }
                        </label>
                    </div>
                </a>
            </div>
        </div>
            
                <!-- Hàng trên -->
                <div class="grid md:grid-cols-2 gap-6 mb-6">
                    <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
                        <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 7 Ngày gần nhất</h4>
                        <canvas id="sevenDayRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
                    </div>
                    <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
                        <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 8 Tuần gần nhất</h4>
                        <canvas id="weeklyRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
                    </div>
                </div>

                <!-- Hàng dưới -->
                <div class="grid md:grid-cols-2 gap-6">
                    <div class="bg-white rounded-xl shadow-lg p-6 hover:scale-105 transform transition duration-300">
                        <h4 class="text-center text-lg font-semibold text-gray-700 mb-4">Doanh Thu 12 Tháng gần nhất</h4>
                        <canvas id="monthlyRevenueChart" class="w-full h-64 bg-blue-50 rounded-lg"></canvas>
                    </div>
                    <div class="bg-gray-100 rounded-xl shadow-lg p-8">
                        <div class="flex justify-between items-center mb-8">
                            <h2 class="text-3xl font-bold text-indigo-800">
                                Doanh Thu
                                <i class="fas fa-chart-bar text-4xl text-indigo-500"></i>
                            </h2>
                        </div>
                        <div class="space-y-8">
                            <div>
                                <label for="period" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Thời Gian</label>
                                <select id="period" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg py-2 px-3 transition duration-200">
                                    <option value="">Chọn Thời Gian</option>
                                    <option value="day">Ngày</option>
                                    <option value="month">Tháng</option>
                                    <option value="year">Năm</option>
                                </select>
                            </div>
                            <div id="dateSelector" class="hidden">
                                <label for="date" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Ngày</label>
                                <input type="date" id="date" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200" />
                            </div>
                            <div id="monthSelector" class="hidden space-y-4">
                                <div>
                                    <label for="month" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Tháng</label>
                                    <select id="month" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200">
                                        @for (int i = 1; i <= 12; i++)
                                        {
                                            <option value="@i">@(new DateTime(2000, i, 1).ToString("MMMM"))</option>
                                        }
                                    </select>
                                </div>
                                <div>
                                    <label for="monthYear" class="block text-lg font-medium text-indigo-800 mb-2">Năm</label>
                                    <select id="monthYear" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200">
                                        @for (int year = 2000; year <= DateTime.Now.Year; year++)
                                        {
                                            <option value="@year" selected="@(year == DateTime.Now.Year)">@year</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div id="yearSelector" class="hidden">
                                <label for="year" class="block text-lg font-medium text-indigo-800 mb-2">Chọn Năm</label>
                                <select id="year" class="w-full border-2 border-indigo-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-3 text-lg transition duration-200">
                                    @for (int year = 2000; year <= DateTime.Now.Year; year++)
                                    {
                                        <option value="@year" selected="@(year == DateTime.Now.Year)">@year</option>
                                    }
                                </select>
                            </div>
                            <div class="flex space-x-4 mt-4">
                                <button id="viewRevenueBtn" class="w-full bg-emerald-500 text-white font-semibold py-3 px-4 rounded-lg shadow-lg transform transition duration-300 ease-in-out hover:bg-emerald-600 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-emerald-400 active:scale-95">
                                    Xem Doanh Thu
                                </button>
                            </div>
                            <div class="bg-white rounded-lg p-6 mt-8 shadow">
                                <h3 class="text-xl font-semibold text-indigo-800 mb-2 flex items-center">
                                    Chi Tiết Doanh Thu
                                    <i class="fas fa-info-circle ml-2 text-indigo-500"></i>
                                </h3>
                                <p id="revenueDisplay" class="text-2xl font-bold text-gray-900">
                                    Chọn một thời gian
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        @* <partial name="_dashboard" /> *@
        <div class="col-12">
            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
                </div>
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src='@Configuration["https:pathImg"]@StoreID/BANNER-HUYNH-HOA-02-2048x780.png' class="d-block text-center w-100 img-home-page" alt="...">
                    </div>
                    <div class="carousel-item">
                        <img src="@Configuration["https:pathImg"]@StoreID/Thiet-ke-chua-co-ten-26.png" class="d-block w-100 img-home-page" alt="...">
                    </div>
                    <div class="carousel-item">
                        <img src="@Configuration["https:pathImg"]@StoreID/Thiet-ke-chua-co-ten-1.jpg" class="d-block w-100 img-home-page" alt="...">
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
    </div>

}
@if (userRole == "Admin")
{
    @* <div class="container-fluid">
    <!-- Start Content -->
    <div class="row">
        <!-- Welcome Section -->
        <div class="col-12 text-center mb-4">
            <h4 class="mt-3">Welcome to the Admin</h4>
        </div>
    </div>

    <!-- Statistic Cards -->
    <div class="row">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card text-center">
                <div class="card-body">
                    <input data-plugin="knob" data-width="70" data-height="70" data-fgcolor="#1abc9c" data-bgcolor="#d1f2eb" value="58" readonly>
                    <h3 class="mt-3">@storeCount</h3>
                    <p class="text-muted">Stores</p>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card text-center">
                <div class="card-body">
                    <input data-plugin="knob" data-width="70" data-height="70" data-fgcolor="#6c757d" data-bgcolor="#e2e3e5" value="35" readonly>
                    <h3 class="mt-3">@customerCount</h3>
                    <p class="text-muted">Users</p>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card text-center">
                <div class="card-body">
                    <input data-plugin="knob" data-width="70" data-height="70" data-fgcolor="#3bafda" data-bgcolor="#d8eff8" value="80" readonly>
                    <h3 class="mt-3">@orderCount</h3>
                    <p class="text-muted">Orders</p>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card text-center">
                <div class="card-body">
                    <input data-plugin="knob" data-width="70" data-height="70" data-fgcolor="#f672a7" data-bgcolor="#fde3ed" value="77" readonly>
                    <h3 class="mt-3">$925.78</h3>
                    <p class="text-muted">Revenue</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="row">
        <div class="col-xl-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Revenue</h5>
                    <div id="chart-revenue"></div>
                </div>
            </div>
        </div>

        <div class="col-xl-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Yearly Sales Report</h5>
                    <div id="chart-sales"></div>
                </div>
            </div>
        </div>
    </div>
</div> 
  *@
    <div class="container-fluid">
        <!-- Welcome Section -->
        <div class="row justify-content-center mb-5">
            <div class="col-12 text-center">
                <h2 class="mb-3">Welcome to the Admin </h2>
               @*  <p class="text-muted">Gain insights and manage your business operations</p> *@
            </div>
        </div>

        <!-- Statistic Cards -->
        <div class="row">
            <!-- Stores -->
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card h-100" id="storeCard" style="background-color: #d1f2eb;">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-center">
                            <h3 class="mb-0 ms-3 text-success" id="storeCount">@storeCount
                               @*  <span class="text-muted" id="storeToday"> (+12)</span> <!-- Stores Today --> *@
                            </h3>
                        </div>
                        <p class="text-muted mt-2 mb-0">Stores</p>
                    </div>
                </div>
            </div>

            <!-- Users -->
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card h-100" id="userCard" style="background-color: #e2e3e5;">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-center">
                            <h3 class="mb-0 ms-3 text-primary" id="customerCount">@customerCount
                                @* <span class="text-muted" id="customerToday"> (+12)</span> <!-- Stores Today --> *@
                            </h3>
                        </div>
                        <p class="text-muted mt-2 mb-0">Users</p>
                    </div>
                </div>
            </div>

            <!-- Orders -->
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card h-100" style="background-color: #d8eff8;">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-center">
                            <h3 class="mb-0 ms-3" id="orderCount">@orderCount
                                @* <span class="text-muted" id="orderToday"> (+12)</span> *@
                            </h3>
                        </div>
                        <p class="text-muted mt-2 mb-0">Orders</p>
                    </div>
                </div>
            </div>

            <!-- Revenue -->
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card h-100" style="background-color: #fde3ed;">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-center">
                            <h3 class="mb-0 ms-3" id="revenue">@totalRevenue</h3>
                        </div>
                        <p class="text-muted mt-2 mb-0">Revenue</p>
                    </div>
                </div>
            </div>
            <div class="container-fluid mt-5">
                <!-- Weekly Revenue Chart -->
                <div class="row mb-5">
                    <div class="col-12">
                        <h4 class="text-center">Doanh Thu 8 tuần gần nhất</h4>
                        <canvas id="weeklyRevenueChart1"></canvas>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <h4 class="text-center">Doanh thu 12 Tháng gần nhất</h4>
                        <canvas id="monthlyRevenueChart1"></canvas>
                    </div>
                </div>
            </div>
        </div>
        </div>
    

}


@section scripts {
    <script>
        
        document.addEventListener("DOMContentLoaded", async function () {
            // You can dynamically set the storeId based on your context


            // Fetch 7-day Revenue Data
            const fetch7DayData = async () => {
                try {
                    const response = await fetch(`https://localhost:7152/Cart/GetTotalRevenueForEachStoreLast7Days?storeId=${@storeID}`);
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching 7-day revenue data:", error);
                    return [];
                }
            };

            // Prepare 7-day Data
            const sevenDayData = await fetch7DayData();
            const sevenDayLabels = sevenDayData.map(day => new Date(day.date).toLocaleDateString());
            const sevenDayRevenues = sevenDayData.map(day => day.totalRevenue);

            // Render 7-day Revenue Chart
            const ctx7Day = document.getElementById("sevenDayRevenueChart").getContext("2d");
            new Chart(ctx7Day, {
                type: "line",
                data: {
                    labels: sevenDayLabels,
                    datasets: [{
                        label: "Doanh thu hàng ngày (VNĐ)",
                        data: sevenDayRevenues,
                        backgroundColor: "rgba(153, 102, 255, 0.2)",
                        borderColor: "rgba(153, 102, 255, 1)",
                        borderWidth: 2,
                        fill: true,
                    }],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Doanh thu: ${context.raw.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                },
            });
        });


        // Fetching weekly data and rendering chart
        document.addEventListener("DOMContentLoaded", async function () {
            //const storeId = 1; // You should assign this dynamically based on your context

            // Fetch Weekly Revenue Data
            const fetchWeeklyData = async () => {
                try {
                    const response = await fetch(`https://localhost:7152/Cart/GetTotalRevenueForEachStoreLast8Weeks?storeId=${@storeID}`);
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching weekly revenue data:", error);
                    return [];
                }
            };

            // Prepare Weekly Data
            const weeklyData = await fetchWeeklyData();

            // Labels for Weeks (Week 1, Week 2,...)
            const weeklyLabels = weeklyData.map((week, index) => `Week ${index + 1}`);

            // Render Weekly Revenue Chart
            const ctxWeekly = document.getElementById("weeklyRevenueChart").getContext("2d");

            new Chart(ctxWeekly, {
                type: "line",
                data: {
                    labels: weeklyLabels,  // Use Week 1, Week 2,... for labels
                    datasets: [{
                        label: "Doanh thu hàng tuần (VNĐ)",
                        data: weeklyData.map(week => week.totalRevenue),
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 2,
                        fill: true,
                    }],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                // Show detailed revenue for each week in tooltip
                                label: function (context) {
                                    const weekIndex = context.dataIndex;  // Get the index of the week
                                    const week = weeklyData[weekIndex];
                                    const weekStartDate = week.startDate;  // Assuming startDate exists in your data
                                    const weekEndDate = week.endDate;  // Assuming endDate exists in your data
                                    const totalRevenue = context.raw;

                                    return `Doanh thu tuần ${weekIndex + 1}: ${totalRevenue.toLocaleString()} VNĐ\nTừ ${weekStartDate} đến ${weekEndDate}`;
                                },
                            },
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                        x: {
                            // Show the week label on the X axis
                            ticks: {
                                callback: function (value, index) {
                                    return `Week ${index + 1}`; // Custom label format for X axis
                                },
                            },
                        },
                    },
                },
            });
        });




        document.addEventListener("DOMContentLoaded", async function () {
            // Fetch Monthly Revenue Data (You can keep this if needed)
            const fetchMonthlyData = async () => {
                try {
                    const response = await fetch(`https://localhost:7152/Cart/GetTotalRevenueForEachStoreLast12Months?storeId=${@storeID}`);
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching monthly revenue data:", error);
                    return [];
                }
            };

            // Prepare Weekly Data
            // Prepare Monthly Data
            const monthlyData = await fetchMonthlyData();
            const monthlyLabels = monthlyData.map(month => month.monthName);
            const monthlyRevenues = monthlyData.map(month => month.totalRevenue);

            // Render Monthly Revenue Chart
            const ctxMonthly = document.getElementById("monthlyRevenueChart").getContext("2d");
            new Chart(ctxMonthly, {
                type: "bar",
                data: {
                    labels: monthlyLabels,
                    datasets: [{
                        label: "Doanh thu hàng tháng (VNĐ)",
                        data: monthlyRevenues,
                        backgroundColor: "rgba(54, 162, 235, 0.6)",
                        borderColor: "rgba(54, 162, 235, 1)",
                        borderWidth: 1,
                    }],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Doanh thu: ${context.raw.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                    scales: {
                        x: { title: { display: true, text: "Tháng" } },
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: "Doanh thu (VNĐ)" },
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                },
            });
        });




        // Handle revenue period selection and fetch data
        document.getElementById('period').addEventListener('change', function () {
            const period = this.value;
            document.getElementById('dateSelector').style.display = (period === 'day') ? 'block' : 'none';
            document.getElementById('monthSelector').style.display = (period === 'month') ? 'block' : 'none';
            document.getElementById('yearSelector').style.display = (period === 'year') ? 'block' : 'none';
        });

        // Handle "View Revenue" button click
        document.getElementById('viewRevenueBtn').addEventListener('click', async function () {
            const period = document.getElementById('period').value;
            let url = `https://localhost:7152/Admin/GetRevenueByStoreIdDayOrMonthOrYear/${@storeID}?period=${period}`;

            if (period === 'day') {
                const date = document.getElementById('date').value;
                if (date) {
                    const formattedDate = new Date(date).toISOString();
                    url += `&date=${formattedDate}`;
                } else {
                    alert("Please select a date for the day period.");
                    return;
                }
            } else if (period === 'month') {
                const month = document.getElementById('month').value;
                const year = document.getElementById('year').value;
                if (month && year) {
                    url += `&year=${year}&month=${month}`;
                } else {
                    alert("Please select both a month and a year.");
                    return;
                }
            } else if (period === 'year') {
                const year = document.getElementById('year').value;
                if (year) {
                    url += `&year=${year}`;
                } else {
                    alert("Please select a year.");
                    return;
                }
            }

            const revenue = await fetchRevenue(url);
            displayRevenue(revenue);
        });

        // Function to fetch revenue data
        async function fetchRevenue(url) {
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Failed to fetch revenue');
                }
                const revenue = await response.json();
                return revenue.data;
            } catch (error) {
                console.error('Error fetching revenue:', error);
                return null;
            }
        }

        // Function to display revenue on UI
        function displayRevenue(revenue) {
            const revenueDisplay = document.getElementById('revenueDisplay');
            if (revenue !== null) {
                revenueDisplay.textContent = `Doanh thu: ${revenue.toFixed(2)} VNĐ`;
            } else {
                revenueDisplay.textContent = 'Error retrieving revenue data.';
            }
        }

        // Fetch cart details from API
        async function fetchCartDetails(storeId) {
            try {
                const response = await fetch(`https://localhost:7152/Admin/cart/${@storeID}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch cart details');
                }
                const cartData = await response.json();
                displayCartDetails(cartData);
            } catch (error) {
                console.error('Error fetching cart details:', error);
            }
        }

        // Function to display cart details
        function displayCartDetails(cartData) {
            const cartDetailsSection = document.getElementById('cartDetails');
            const tableBody = document.getElementById('cartTableBody');
            const totalCartValueElement = document.getElementById('totalCartValue');

            if (cartData) {
                document.getElementById('delivery').textContent = cartData.delivery || 'N/A';
                document.getElementById('phoneNumber').textContent = cartData.phoneNumber || 'N/A';
                document.getElementById('orderTime').textContent = new Date(cartData.timeOrder).toLocaleString();
                document.getElementById('status').textContent = cartData.status || '0';

                tableBody.innerHTML = '';
                let totalCartValue = 0;
                cartData.detailCarts.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `<td>${item.foodName}</td><td>${item.quantity}</td><td>${item.totalPrice.toLocaleString()}</td>`;
                    tableBody.appendChild(row);
                    totalCartValue += item.totalPrice;
                });

                totalCartValueElement.textContent = totalCartValue.toLocaleString();
            }
        }
       
    </script>
    <script>
        $(document).ready(function () {
            $('#submit-btn').click(function () {
                var selectedMonth = $('#select-month').val();
                var selectedYear = $('#select-year').val();

                if (!selectedMonth || !selectedYear) {
                    console.error('Chưa chọn tháng hoặc năm.');
                    return;
                }

                if (!@storeID || @storeID <= 0) {
                    console.error('storeID không hợp lệ.');
                    return;
                }

                var url = 'https://localhost:7152/TotalMoneyForMonth?storeID=' + @storeID + '&month=' + selectedMonth + '&year=' + selectedYear;

                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (response) {
                        console.log('Dữ liệu doanh thu hàng tháng:', response);
                        if (response.isSuccess) {
                            var totalRevenue = response.data;
                            var resultHtml = `<tr>
                                                        <td>${selectedMonth}</td>
                                                        <td>${selectedYear}</td>
                                                        <td>${totalRevenue} đ</td>
                                                      </tr>`;
                            $('#result-table-body').html(resultHtml);
                        } else {
                            console.error('Lỗi: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Lỗi khi lấy dữ liệu doanh thu hàng tháng:', error);
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const fetchWeeklyData = async () => {
                try {
                    const response = await fetch("https://localhost:7152/Admin/GetTotalRevenueForLast8Weeks"); // Đổi endpoint theo API của bạn
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching weekly revenue data:", error);
                    return [];
                }
            };

            const weeklyData = await fetchWeeklyData();

            // Chuẩn bị dữ liệu cho biểu đồ
            const labels = weeklyData.map(
                (week) => `Week ${week.weekNumber} (${week.startDate} - ${week.endDate})`
            );
            const revenues = weeklyData.map((week) => week.totalRevenue);

            // Tạo biểu đồ
            const ctx = document.getElementById("weeklyRevenueChart1").getContext("2d");
            new Chart(ctx, {
                type: "line",
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: "Doanh thu hàng tuần(VNĐ)",
                            data: revenues,
                            backgroundColor: "rgba(75, 192, 192, 0.2)",
                            borderColor: "rgba(75, 192, 192, 1)",
                            borderWidth: 2,
                            fill: true,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Doanh thu: ${context.raw.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()}VNĐ`;
                                },
                            },
                        },
                    },
                },
            });
        });


    </script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const fetchMonthlyData = async () => {
                try {
                    const response = await fetch("https://localhost:7152/Admin/GetTotalRevenueForLast12Months"); // Thay endpoint của bạn
                    const result = await response.json();
                    if (result.isSuccess) {
                        return result.data;
                    } else {
                        console.error("Error:", result.message);
                        return [];
                    }
                } catch (error) {
                    console.error("Error fetching monthly revenue data:", error);
                    return [];
                }
            };

            const monthlyData = await fetchMonthlyData();

            // Chuẩn bị dữ liệu cho biểu đồ
            const labels = monthlyData.map((month) => month.monthName);
            const revenues = monthlyData.map((month) => month.totalRevenue);

            // Tạo biểu đồ doanh thu hàng tháng
            const ctx = document.getElementById("monthlyRevenueChart1").getContext("2d");
            new Chart(ctx, {
                type: "bar", // Loại biểu đồ là cột
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: "Doanh thu hàng tháng (VNĐ)",
                            data: revenues,
                            backgroundColor: "rgba(54, 162, 235, 0.6)",
                            borderColor: "rgba(54, 162, 235, 1)",
                            borderWidth: 1,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "top" },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Doanh thu: ${context.raw.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Tháng",
                            },
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: "Doanh thu (VNĐ)",
                            },
                            ticks: {
                                callback: function (value) {
                                    return `${value.toLocaleString()} VNĐ`;
                                },
                            },
                        },
                    },
                },
            });
        });

    </script>
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-knob/1.2.13/jquery.knob.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.tailwindcss.com"></script>
<script src="~/js/HomePage.js" asp-append-version="true"></script>